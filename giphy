#!/usr/bin/env python3

# Giphizer 2.0
# Copyright (c) 2016, 2024 Jason Jackson
# Released under the MIT license; see LICENSE for details.
# https://github.com/jakshin/giphizer

"""
Have you ever though 'oh man, Giphy is great, but I wish I could use it in my terminal'?
Well now you can! (Assuming you're an iTerm user...)
For usage info, just run this without arguments, or with -h or --help.
"""

import argparse
import errno
import fcntl
import json
import os
import re
import sys
import tempfile
from base64 import b64encode
from os import path
from urllib.parse import urlencode
from urllib.request import urlopen

MAX_CACHED_GIFS = 1000           # Adjust freely; set to 0 to disable caching


def main():
    """
    Main program logic.
    """
    args = parse_command_line()

    incapable = check_image_capability()
    if incapable is not None:
        display_error(args, incapable)

    image_info = choose_image(args)
    if image_info.get("error") is not None:
        display_error(args, image_info["error"])

    if MAX_CACHED_GIFS > 0:
        image_data = load_image(image_info["id"], image_info["url"])
    else:
        image_data = download_image(image_info["url"])

    image_b64 = b64encode(image_data).decode("utf-8")
    display_image(image_b64, image_info["url"])

    if not args.bare:
        print(image_info["page"])
        display_logo()


def parse_command_line():
    """
    Parses command-line options, returning a Namespace. Displays usage/error and exits
    if there are any problems with the command line, or if the user requested help.
    """
    parser = argparse.ArgumentParser(usage="%(prog)s [options] query",
                                     description="Giphizer displays a Giphy GIF in your iTerm terminal. "
                                                 "The 'random' and default 'translate' endpoints select a random GIF "
                                                 "based on the word or phrase you enter, discarding punctuation. "
                                                 "The 'id' endpoint attempts to display the specific GIF requested. "
                                                 "iTerm is needed, and images aren't displayed in tmux or GNU screen."
                                                 "Source: https://github.com/jakshin/giphizer",
                                     epilog="Giphizer displays images from https://giphy.com, "
                                            "but has no official connection with Giphy.")
    parser.add_argument("query", nargs="*",
                        help="the term, phrase or ID to search Giphy for")
    parser.add_argument("-b", "--bare", action="store_true",
                        help="display bare GIFs, without their URLs")
    parser.add_argument("-e", "--endpoint", default="translate", choices=["translate", "random", "id"],
                        help="the Giphy endpoint to use (default = 'translate')")
    parser.add_argument("-r", "--max-rating", choices=["y", "g", "pg", "pg-13", "r"],
                        help="disallow GIFs rated higher (default = no limit, i.e. use any GIF)")
    parser.add_argument("-q", "--quiet", action="store_true",
                        help="suppress error messages (except crash-level problems)")

    # Try to read options from our dotfile
    dot_file_opts = read_options_from_file("~/.giphyrc")
    args = parser.parse_args(dot_file_opts)

    # Read options from the command line
    parser.parse_args(namespace=args)

    # Massage the query received into a single trimmed string
    query = ""
    for arg in args.query:
        arg = re.sub(r'\s+', " ", arg).strip()
        if arg != "":
            if query != "":
                query += " "
            query += arg

    args.query = query
    if args.query == "":
        parser.print_help()
        display_logo()
        exit(0)

    return args


def read_options_from_file(options_path):
    """
    Reads options from a file, if it exists, returning an array of strings.
    Lines beginning with hash characters are ignored, so they can serve as comments in the file.
    """
    all_args = []

    try:
        with open(path.expanduser(options_path), "r") as option_file:
            lines = option_file.readlines()

        for line in lines:
            line = line.strip()
            if line == "" or line[0] == "#":
                continue

            args = line.split()
            all_args += args
    except IOError as ex:
        if ex.errno != errno.ENOENT:
            raise  # It's fine for the file not to exist, but any other error is bad

    return all_args


def display_error(args, err_msg):
    """
    Displays the given error message and exits with an error code,
    unless --quiet was passed, in which case it just silently exits.
    """
    if args.quiet:
        exit(0)
    else:
        sys.stderr.write("error: %s\n" % err_msg)
        exit(1)


def check_image_capability():
    """
    Checks whether the current environment supports displaying images properly. First, iTerm is required.
    Second, we shouldn't be running under tmux or GNU screen; tmux can display some images, but fails on some GIFs,
    and doesn't move the cursor properly when it does work, leaving the prompt on top of the displayed image;
    GNU screen doesn't pass the escape sequences through to iTerm, so big gobs of Base64 data get displayed
    instead of an image.
    """
    if os.environ.get("ITERM_PROFILE") is None:
        # It doesn't look like we're running under iTerm
        return "GIFs can only be displayed in iTerm"

    term = os.environ.get("TERM")
    if term is not None and term.startswith("screen"):
        # GNU screen and tmux both set TERM to a string beginning with 'screen';
        # GNU screen sets STY, tmux doesn't
        return "GIFs can't be displayed in tmux or GNU screen"

    return None  # No problems detected


def choose_image(args):
    """
    Chooses a GIF, using the preferred endpoint ('id, 'random', or 'translate').
    Returns a dictionary containing some info about the GIF, including its URL.
    """
    api_key = os.environ.get("GIPHY_API_KEY")
    if api_key is None:
        return {"error": "No API key provided in the $GIPHY_API_KEY environment variable"}

    url = "https://api.giphy.com/v1/gifs/"

    if args.endpoint == "id":
        url += args.query
        url += "?%s" % urlencode({"api_key": api_key})
    elif args.endpoint == "random":
        url += "random?%s" % urlencode({"api_key": api_key, "tag": args.query})
    else:
        # Use the 'translate' endpoint by default
        url += "translate?%s" % urlencode({"api_key": api_key, "s": args.query})

    if args.max_rating is not None:
        url += "&rating=" + args.max_rating

    response = json.load(urlopen(url))
    data = response["data"]

    if args.endpoint == "random":
        return {"id":     data["id"],
                "page":   data["url"],
                "url":    data["image_url"],
                "width":  int(data["image_width"]),
                "height": int(data["image_height"])}
    else:
        # Endpoint is 'translate' or 'id'
        original = data["images"]["original"]
        return {"id":     data["id"],
                "page":   data["url"],
                "url":    original["url"],
                "width":  int(original["width"]),
                "height": int(original["height"]),
                "size":   int(original["size"]),
                "rating": data["rating"]}


def download_image(url):
    """
    Downloads a GIF, returning its raw image data.
    """
    return urlopen(url).read()


def load_image(image_id, url):
    """
    Loads a GIF from cache, first downloading it if needed. Returns the GIF's raw image data.
    Some attempts are made to prevent concurrently-executing instances of this program from stomping on
    each other's use of cache, but concurrent interactions haven't been thoroughly tested.
    """
    cache_dir = path.expanduser("~/Library/Caches/Giphizer")
    cache_path = path.join(cache_dir, image_id + ".gif")

    try:
        # Ensure that the cache dir exists
        os.makedirs(cache_dir)
    except OSError:
        if not path.isdir(cache_dir):
            raise

    try:
        with open(cache_path, "rb") as cache_file:
            # GIF already cached
            return cache_file.read()
    except IOError as ex:
        if ex.errno != errno.ENOENT:
            raise  # An error other than file-doesn't-exist occurred; bubble it up

        # GIF not cached yet, download it
        image_data = urlopen(url).read()

        with tempfile.NamedTemporaryFile(delete=False, dir=cache_dir, suffix=".down") as temp_file:
            temp_path = temp_file.name
            temp_file.write(image_data)
            temp_file.flush()
            fsync(temp_file.fileno())

        if temp_path is not None:
            try:
                os.rename(temp_path, cache_path)  # Atomic operation
            except OSError:
                # If caching is broken, the program can still work, albeit more slowly,
                # so let's just try to clean up our temp file, then silently continue
                try:
                    os.remove(temp_path)
                except OSError:
                    pass  # Oh, well

            fsync_dir(cache_dir)
            clean_cache(cache_dir)

        return image_data


def display_image(image_b64, image_name):
    """
    Displays a GIF by printing it to the terminal using iTerm-specific escape sequences.
    This should not be called when not running under iTerm, or when running under tmux or GNU screen
    (see check_image_capability() for details).
    """
    open_esc = "\033]"  # "\033Ptmux;\033\033]" under tmux
    close_esc = "\a"    # "\a\033\\" under tmux

    name = "name=%s;" % b64encode(image_name.encode("utf-8")).decode("utf-8")
    width = ""
    inline = "inline=1"

    print("%s1337;File=%s%s%s:%s%s" % (open_esc, name, width, inline, image_b64, close_esc))
    return True


def display_logo():
    """
    Displays a Giphy logo image.
    Nothing is displayed under tmux or GNU screen, or when not running under iTerm.
    """
    if check_image_capability() is not None:
        return

    # base64 --break=100 -i Poweredby_100px-Black_VertLogo.png | pbcopy
    # (From https://support.giphy.com/hc/en-us/articles/360022283772-GIPHY-Brand-Guidelines)
    logo_b64 = """
        iVBORw0KGgoAAAANSUhEUgAAAGQAAAAbCAYAAACKlipAAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAGXRFWHRTb2Z0d2FyZQBBZG9i
        ZSBJbWFnZVJlYWR5ccllPAAABNBJREFUeNrsWj1sHEUUnkNO2KCgW0QKhwKuQaTjACG786a7jhM1UjYUdgemo8ulgo4ruaRZSwil
        vHTuvNeFBjZUV55TJCdAMJaAnMzPsuN8Qx6Pt7uT9Z7vLPlJz7vz9+bN+589N9I0VWewPNCQFXKrnf3xnalMfruoPhv/ilaiBgPt
        sMoX9piw8Tbe9RHdJ9DKcJbhFO1VtDUZt2s4fY25qzn7+jlrFOun+1vwBLp0P86zh/aMLljJEVY/ww1nhRz+TVtXM4wdVhlhB6xv
        nOEdjHXZ2HqGEfqNcD7HYUIc/EscNISAJwL9GP0h65+CdjtnjRL6J1ijiJBD4ZxfZ/g+katH5vX55JUl8NJdCNQI+kqGr+N9BuUY
        YXUgrA48JUBbE8ukHpUQi94llqmF/g7WU+uOmJW32Zp18NomnqvI3gnGDL4CpXaAPni+w70jVyHZiosH2fOSUvd/VGq7VKTfarPx
        F2jtqa0t87yZha6eg0KmQA2hvEwOb0PJEKHIx+ECCEQzD2oRT1snnjgjwnIJpwEzGMrrBM9PwQNXiOXThtZ7eF4hih0DlZNCMmUc
        5YOfjpjfLA8/e1vH8ZBQUE4RaAiF5hIPB/YhoJnDvh1h31YNHm/5s3nCAz/GqLbJu3JWSE0QZp4SIMkXeVlCkl+CA1iBaRJWfOIx
        CYTnwQJ9YtVjgf6UJGOPWP4qrPYeU2LMEjjNE4p437hAIR7mBVCAJsqfLUIhrwHLIGHVlbWgruA9u4Igxjh8gLXjAk+YEGFPsfcq
        9tI5XhsX0EpyipU2488Z6lKIOcyIdtz+/u03fni8cuHF841LHxUrYpozNkUYsvTHxLJmqKrs+wyJeFagaEXK44hYakTKUmmNFkpy
        qeydsmJAmheVhVPxHtJQt2KUvaNUbQZVNPTBq4NfDv545DfPXdZfPdh66ezKd7IeUgfYu4e9lNrL4DCnkmkxK04IHb/Em/NCjS/k
        trzqi+YyP+fuUkRfnmc8hKNKB3GGqXlK4y44eCeNM0zNs2RuK0MzpwhizLNresK4HSujZUBnuM344OsCgddUmNPP6edn1AU8/4vP
        LYFXJA5fBTbYZe+40MS9KaqBlrlr7bO+iPEaYU9ysxBv9QtViI9w1BTGRkLftuOl7lngmhCGqhQ0oVBh2lK/KxhcTygeFq6QUCiL
        PzmqKZ4IqYHvYsb6rh/DmndA5yroHLDxbg1nMbngLuu7gQgQCcbWX8akzq3qpsBoXMPtecKSpxHSx6xd13kmzOO/+/9HEDlULYOH
        vMnaQ1LJpDnYO0H+9oT9nzV0KddQtYxlbzInugFRZAt5o6xErQpDhKSNnLzYP033EH8OSdtWaEVVXFTzfiGMy6mqWiaFHDCmuxBO
        ggRMQ8e84HpBCNkRxm445qyI5amoLFQtg0JMqHiPtPvq6Y878ZwNYUj2K/KcuIJClODpzp6/SIX0mUKaEMAQ1tSu4Y5gq7eeOiUg
        K+Thu4fqr3P76s/nvcbP1Q6z9qHyXvhd7V94rA438z1khyXZppB0K1naaQVZIY/eOq+e/p6xVoXwN2v/ialld5FrDiRHc0jAp0Qh
        J39BjPCpIRA+pdxFGItY4hzllMyJkGSrlN3a4ZOOLkjsowo85P1f1hksCs4UsmTwjwADAPfqw1QnSLBaAAAAAElFTkSuQmCC
        """.replace(' ', '')
    display_image(logo_b64, "Poweredby_100px-Black_VertLogo.png")


def clean_cache(cache_dir_path):
    """
    Cleans the cache by removing old files, based on last access time,
    until there are at most MAX_CACHED_GIFS files left in the directory.
    If we've somehow messed up in load_image() and left temp files in the cache directory,
    they are handled here just like GIFs, i.e. as part of the cache which may be aged out.
    """
    cwd = os.getcwd()

    try:
        os.chdir(cache_dir_path)
        files = sorted(os.listdir(cache_dir_path), key=path.getatime)
        delete = len(files) - MAX_CACHED_GIFS

        for i in range(0, delete):
            try:
                # Attempt to perform atomic delete in a way which won't break with concurrent program runs
                file_name = files[i]
                with tempfile.NamedTemporaryFile(delete=True, dir=cache_dir_path, suffix=".trash") as temp_file:
                    cache_path = path.join(cache_dir_path, file_name)
                    os.rename(cache_path, temp_file.name)
            except OSError as ex:
                if ex.errno != errno.ENOENT:
                    raise  # An error other than file-doesn't-exist occurred; bubble it up

    finally:
        os.chdir(cwd)


def fsync(fd):
    """
    More effective fsync on macOS.
    See https://github.com/untitaker/python-atomicwrites for background.
    """
    fcntl.fcntl(fd, fcntl.F_FULLFSYNC)


def fsync_dir(dir_path):
    """
    Ensures that a directory is fsynced, i.e. that any changes to the metadata it contains
    are visible in the file system. No effect on any files in the directory.
    """
    fd = os.open(dir_path, 0)

    try:
        fsync(fd)
    finally:
        os.close(fd)


# Do the things
main()
